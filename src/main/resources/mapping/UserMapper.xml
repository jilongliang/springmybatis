<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.flong.dao.UserMapper">
	<resultMap id="BaseResultMap" type="com.flong.pojo.entity.User">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="username" property="username" jdbcType="VARCHAR" />
		<result column="password" property="password" jdbcType="VARCHAR" />
		<result column="age" property="age" jdbcType="INTEGER" />
	</resultMap>


	<sql id="Base_Column_List">
		id, username, password, age
	</sql>

	<!-- spring-mybatis.xml已经配置了可以省略包路径，直接用Vo名称即可 -->
	<select id="list" resultType="User">
		select
		<include refid="Base_Column_List" />
		from user
	</select>


	<select id="selectLogin" resultMap="BaseResultMap"
		parameterType="String">
		select * from user
		where username = #{username,jdbcType=VARCHAR}
	</select>


	<select id="selectId" resultMap="BaseResultMap" parameterType="java.lang.Integer">
		select * from user
		where id = #{id,jdbcType=INTEGER}
	</select>


	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from user
		where id = #{id,jdbcType=INTEGER}
	</select>


	<select id="query" parameterType="java.util.Map" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from user where 1=1
		<if test="username != null">and username=#{username}</if>
		<if test="password != null">and password=#{password}</if>
		<if test="keyword != null">
			and (username like "%"#{keyword}"%" or password like "%"#{keyword}"%" )
		</if>
	</select>
	
	

	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from user
		where id = #{id,jdbcType=INTEGER}
	</delete>


	<insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="com.flong.pojo.entity.User">
		insert into user (username, password, age,typeid)
		values 
		(
			#{username,jdbcType=VARCHAR},
			#{password,jdbcType=VARCHAR},
			#{age,jdbcType=INTEGER},
			#{typeid,jdbcType=VARCHAR}
		)
	</insert>



	<insert id="insertSelective" parameterType="com.flong.pojo.entity.User">
		insert into user
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="username != null">
				username,
			</if>
			<if test="password != null">
				password,
			</if>
			<if test="age != null">
				age,
			</if>
			<if test="typeid != null">
				typeid,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="username != null">
				#{username,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				#{password,jdbcType=VARCHAR},
			</if>
			<if test="age != null">
				#{age,jdbcType=INTEGER},
			</if>
			<if test="typeid != null">
				#{typeid,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	
	
	<update id="updateByPrimaryKeySelective" parameterType="com.flong.pojo.entity.User">
		update user
		<set>
			<if test="username != null">
				username = #{username,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				password = #{password,jdbcType=VARCHAR},
			</if>
			<if test="age != null">
				age = #{age,jdbcType=INTEGER},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	
	
	
	<update id="updateByPrimaryKey" parameterType="com.flong.pojo.entity.User">
		update user
		set username = #{username,jdbcType=VARCHAR},
		password = #{password,jdbcType=VARCHAR},
		age = #{age,jdbcType=INTEGER}
		where id = #{id,jdbcType=INTEGER}
	</update>



</mapper>